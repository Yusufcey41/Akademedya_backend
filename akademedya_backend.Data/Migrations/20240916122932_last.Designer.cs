// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using akademedya_backend.Data.Context;

#nullable disable

namespace akademedya_backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240916122932_last")]
    partial class last
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("akademedya_backend.Data.Models.Columns", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    b.Property<int>("ColumnId")
                        .HasColumnType("int")
                        .HasColumnName("column_id");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("column_name");

                    b.HasKey("TableId", "ColumnId");

                    b.ToTable("Columns", "dbo");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.TableInformations", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("table_image");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("table_name");

                    b.HasKey("TableId");

                    b.ToTable("table_informations", "dbo");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.TablesValues", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    b.Property<int>("InputAreaId")
                        .HasColumnType("int")
                        .HasColumnName("input_area_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("value");

                    b.HasKey("TableId", "InputAreaId");

                    b.ToTable("TablesValues", "dbo");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.UserTables", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TableId", "UserId");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserTables", "dbo");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.UsersInformation", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("password");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.HasKey("UserId");

                    b.ToTable("user_informations", "dbo");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.Columns", b =>
                {
                    b.HasOne("akademedya_backend.Data.Models.TableInformations", "TableInformations")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_columntable_id");

                    b.Navigation("TableInformations");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.TablesValues", b =>
                {
                    b.HasOne("akademedya_backend.Data.Models.TableInformations", "TableInformations")
                        .WithMany("TablesValue")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_valuetable_id");

                    b.Navigation("TableInformations");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.UserTables", b =>
                {
                    b.HasOne("akademedya_backend.Data.Models.TableInformations", "TableInformations")
                        .WithOne("UserTables")
                        .HasForeignKey("akademedya_backend.Data.Models.UserTables", "TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_table_id");

                    b.HasOne("akademedya_backend.Data.Models.UsersInformation", "UserInformation")
                        .WithMany("UserTables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_id");

                    b.Navigation("TableInformations");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.TableInformations", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("TablesValue");

                    b.Navigation("UserTables");
                });

            modelBuilder.Entity("akademedya_backend.Data.Models.UsersInformation", b =>
                {
                    b.Navigation("UserTables");
                });
#pragma warning restore 612, 618
        }
    }
}
